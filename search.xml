<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C/C++</title>
    <url>/2021/08/28/C-C/</url>
    <content><![CDATA[<blockquote>
<center><font size="4">“海兰珠”</font></center>
</blockquote>
<span id="more"></span>
<h2 id="平方数规律"><a href="#平方数规律" class="headerlink" title="平方数规律"></a>平方数规律</h2><p>对于任意四个连续的数：$a,b,c,d$，则有$d^2+a^2-b^2-c^2=4$，如$1^2+4^2-2^2-3^2=4$。</p>
<h2 id="一个集合中任取两个数的乘积之和"><a href="#一个集合中任取两个数的乘积之和" class="headerlink" title="一个集合中任取两个数的乘积之和"></a>一个集合中任取两个数的乘积之和</h2><p>在某种情形下可用于后缀数组的height数组在分组后求解方案数，如相同前缀字符数大于等于k的子字符串组合数有多少种。<br>一般处理方法是O(n^2)的时间复杂度枚举所有可能的组合，但是这种巧妙的处理方法使得时间复杂度降为O(n)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> i,n,res,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=a[i];</span><br><span class="line">        ans=ans+res*a[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AK之神庇佑"><a href="#AK之神庇佑" class="headerlink" title="AK之神庇佑"></a>AK之神庇佑</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            /\       |  /  |**、</span></span><br><span class="line"><span class="comment">//           /  \      | /   |   \</span></span><br><span class="line"><span class="comment">//          /    \     |/    |   /  _____                      ____   |  /</span></span><br><span class="line"><span class="comment">//         /------\    |\    |__/  /     \  \      /\      /  /    \  | /</span></span><br><span class="line"><span class="comment">//        /        \   | \   |    /       \  \    /  \    /  /______\ |/</span></span><br><span class="line"><span class="comment">//       /          \  |  \  |    \       /   \  /    \  /   \        |</span></span><br><span class="line"><span class="comment">//      /            \ |   \ |     \_____/     \/      \/     \_____  |</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┏┓　　 　┏┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┏┛┗━━━━━━━┛┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃ 　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　━　　 　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　＞　　　＜　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃...　⌒　... 　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┗━┓　　　┏━┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃  　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　　　　　┣┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　　　　　┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┗┓┓┏━┳┓┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┃┫┫　┃┫┫</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┗┻┛　┗┻┛</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// warm heart, wagging tail,and a smile just for you!</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            _ooOoo_</span></span><br><span class="line"><span class="comment">//                           o8888888o</span></span><br><span class="line"><span class="comment">//                           88&quot; . &quot;88</span></span><br><span class="line"><span class="comment">//                           (| -_- |)</span></span><br><span class="line"><span class="comment">//                           O\  =  /O</span></span><br><span class="line"><span class="comment">//                        ____/`---&#x27;\____</span></span><br><span class="line"><span class="comment">//                      .&#x27;  \|     |//  `.</span></span><br><span class="line"><span class="comment">//                     /  \|||  :  |||//  \</span></span><br><span class="line"><span class="comment">//                    /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">//                    |   | \\  -  /// |   |</span></span><br><span class="line"><span class="comment">//                    | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |</span></span><br><span class="line"><span class="comment">//                    \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">//                  ___`. .&#x27;  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">//               .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span></span><br><span class="line"><span class="comment">//              | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">//              \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">//         ======`-.____`-.___\_____/___.-`____.-&#x27;======</span></span><br><span class="line"><span class="comment">//                            `=---=&#x27;</span></span><br><span class="line"><span class="comment">//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structure</title>
    <url>/2021/09/07/Data-Structure/</url>
    <content><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><blockquote>
<center>以我目前的理解对树状数组的知识进行记录描述</center>
在某些区间求和的问题上，容易想到用前缀和的知识处理可以快速查询任意区间的和，但是若是遇到对某点的值进行更新的情况，那么用前缀和的方法进行更新sum[]数组的值时间复杂度会变为O（N），这样的处理方法太慢了，由此可以引入树状数组这一数据结构进行优化。空口无凭，老表，上图！
![树状数组](1.bmp)
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>],c[<span class="number">1005</span>]; <span class="comment">//对应原数组和树状数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//从低位到高位第一位为1的位置的值，如6（110），lowbit（6）=2（10）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span><span class="comment">//在i位置加上k</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += k;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="comment">//求A[1 - i]的和</span></span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res += c[i];</span><br><span class="line">        i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph Theory</title>
    <url>/2021/08/12/Graph%20Theory/</url>
    <content><![CDATA[<blockquote>
<center><font size="4">“万象神宫”</font></center>
</blockquote>
<span id="more"></span>
<h2 id="dijkstra（二维数组实现）"><a href="#dijkstra（二维数组实现）" class="headerlink" title="dijkstra（二维数组实现）"></a>dijkstra（二维数组实现）</h2><p>用于求单源最短路，用二维数组存储各边的值，空间复杂度为O（n^2）,数据量超过1e5便不再适用，但是更新dis[n]的值方便</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> di;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        i=a;</span><br><span class="line">        di=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.di&gt;b.di;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> val[N][N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;N;i++) dis[i]=INF;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;,dis[1]); </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;N;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            val[i][j]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,i,a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="comment">// printf(&quot;%d %d\n&quot;,dis[1],dis[2]);  </span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            val[a][b]=c;</span><br><span class="line">            val[b][a]=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">node <span class="title">root</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            node v=q.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">// printf(&quot;%d %d\n&quot;,v.i,v.di);</span></span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(vis[v.i]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[v.i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i]&amp;&amp;dis[i]&gt;dis[v.i]+val[v.i][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// printf(&quot;%d %d %d %d\n&quot;,i,v.i,dis[v.i],val[v.i][i]);</span></span><br><span class="line">                    dis[i]=dis[v.i]+val[v.i][i];</span><br><span class="line">                    <span class="function">node <span class="title">tmp</span><span class="params">(i,dis[i])</span></span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="dijkstra（链式前向星实现）"><a href="#dijkstra（链式前向星实现）" class="headerlink" title="dijkstra（链式前向星实现）"></a>dijkstra（链式前向星实现）</h2><p>用链式前向星存储各点的邻接边，适用于数据量较大的情况，但是实现以及理解起来不太方便，也用于更新dis[n]的值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> di;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        i=a;</span><br><span class="line">        di=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,v,next;</span><br><span class="line">&#125;e[<span class="number">2</span>*N];;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.di&gt;b.di;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,s,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i]=INF;</span><br><span class="line">        head[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    e[tot].val=c;</span><br><span class="line">    e[tot].v=b;</span><br><span class="line">    e[tot].next=head[a];</span><br><span class="line">    head[a]=tot;</span><br><span class="line">    <span class="comment">//printf(&quot;tot:%d %d %d %d %d\n&quot;,tot,e[tot].val,e[tot].v,e[tot].next,a);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">root</span><span class="params">(s,dis[s])</span></span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="comment">//for(int i=head[t];i!=-1;i=e[i].next) printf(&quot;%d &quot;,i);</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node tmp=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[tmp.i]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[tmp.i]=<span class="number">1</span>;</span><br><span class="line">        t=tmp.i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[t];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y=e[i].v;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d %d %d %d\n&quot;,t,y,dis[t],dis[y],e[i].val);</span></span><br><span class="line">            <span class="keyword">if</span>(!vis[y]&amp;&amp;dis[t]+e[i].val&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[t]+e[i].val;</span><br><span class="line">                <span class="function">node <span class="title">x</span><span class="params">(y,dis[y])</span></span>;</span><br><span class="line">                q.<span class="built_in">push</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,dis[i],i==n?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Floyed"><a href="#Floyed" class="headerlink" title="Floyed"></a>Floyed</h2><p>求任意两点间的最短路径,主要在于数据的预处理，后续跟上三个for循环就行，<del>没什么好说得</del>,确实逮说两句。借助中间点来更新的那一层for循环得放在最外层，顺序不能调换，即k-i-j，用一层循环k按次序不断更新dis[i][j]的值，最终更新后的值即为任意两点最短距离。</p>
<ul>
<li><a href="https://acm.hdu.edu.cn/showproblem.php?pid=1869">HDU - 1869</a></li>
</ul>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,k,finish,x,y;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;   </span><br><span class="line">        finish=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) dis[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> dis[i][j]=INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            dis[x][y]=<span class="number">1</span>;</span><br><span class="line">            dis[y][x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dis[i][j]&gt;dis[i][k]+dis[k][j]) </span><br><span class="line">                    &#123;</span><br><span class="line">                        dis[i][j]=dis[i][k]+dis[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[i][j]&gt;<span class="number">7</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    finish=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(finish!=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(finish!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="kruskal"><a href="#kruskal" class="headerlink" title="kruskal"></a>kruskal</h2><p>求n个点的最小生成树，依次取权值最小的边，且该边的两个端点不在一个集合中（用并查集来处理判断），最后取到n-1条边即为最小生成树。</p>
<ul>
<li><a href="https://vjudge.net/problem/POJ-1258">POJ_1258</a></li>
</ul>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v1;</span><br><span class="line">    <span class="keyword">int</span> v2;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        v1=a;</span><br><span class="line">        v2=b;</span><br><span class="line">        e=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//重载优先队列的比较符(值较小的在队首)</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.e&gt;b.e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优先队列默认值较大的优先级高（在队首），这里重载过后值小的在队首</span></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="comment">//并查集找集合公共祖先，</span></span><br><span class="line"><span class="comment">//用于判断集合相交及集合的合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,v,a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;<span class="comment">//初始化每个点为一个单独集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%n==<span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                x=i/n;</span><br><span class="line">                y=n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                x=i/n+<span class="number">1</span>;</span><br><span class="line">                y=i%n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">            <span class="comment">//printf(&quot;i:%d %d %d %d\n&quot;,i,x,y,v);</span></span><br><span class="line">            <span class="keyword">if</span>(y&lt;=x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="function">node <span class="title">tmp</span><span class="params">(x,y,v)</span></span>;</span><br><span class="line">            q.<span class="built_in">push</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            node x=q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            a=<span class="built_in">find</span>(x.v1);</span><br><span class="line">            b=<span class="built_in">find</span>(x.v2);</span><br><span class="line">            <span class="keyword">if</span>(a==b) <span class="keyword">continue</span>;</span><br><span class="line">            fa[a]=b;</span><br><span class="line">            cnt++;</span><br><span class="line">            sum+=x.e;</span><br><span class="line">            <span class="comment">//printf(&quot;e:%d\n&quot;,x.e);</span></span><br><span class="line">            <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;<span class="comment">//此时n-1条边的树即为最小生成树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>End</strong></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>kruskal</tag>
        <tag>floyed</tag>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>差分</title>
    <url>/2021/09/06/%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<blockquote>
<center><font size="4">盖亚！</font></center>
<--! more -->
</--!></blockquote>
<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>给定一个长度为 n 的数列 a1,a2,…,an，每次可以选择一个区间 [l,r]，使下标在这个区间内的数都加一或者都减一。<br>求至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列可能有多少种。</p>
<p>构造差分序列，$b_1=a_1,b_2=a_2-a_1 … b_n=a_n-a_n-1,b_(n+1)=0$，使得原序列的值均相等即是差分序列$b_2$至$b_n$的值为0，而每次选取选取区间[l,r]对其进行加1或减1也就是对$b_l$和$b_(r+1)$进行一加一减的操作，而内部的差分值不会改变，因此对任意区间进行此操作即为对任意两个点进行一加一减的操作，利用这个特点可以统计出差分序列正值的和的绝对值p与负值的和的绝对值q，有正有负的情形下首选对两个点一加一减的操作，这样可以使操作次数最少，次数为$min(p,q)$,剩下只有正数或负数的情形，可以选择对b1与其中某点进行操作或对$b_(n+1)$与其中某点操作，操作次数为$|p-q|$,故总次数为$|p-q|+min(p,q)=max(p,q)$,值得注意的是前一步的操作不会改变$b_1即a_1$的值，后一步的操作可以选择性的对$a_1$的值进行更改0至|p-q|次，故$a_1$的结果会有$|p-q|+1$种结果，那们最终相同的序列亦会有$|p-q|+1$种情形。<br><a href="https://www.acwing.com/problem/content/102/">acwing-100</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ll posi=<span class="number">0</span>;</span><br><span class="line">    ll nega=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        b[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    b[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        posi+=(b[i]&gt;<span class="number">0</span>)?b[i]:<span class="number">0</span>;</span><br><span class="line">        nega+=(b[i]&lt;<span class="number">0</span>)?b[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll p=posi;</span><br><span class="line">    ll q=<span class="built_in">abs</span>(nega);</span><br><span class="line">    ll ans=<span class="built_in">max</span>(p,q);</span><br><span class="line">    ll res=<span class="built_in">abs</span>(p-q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n%lld\n&quot;</span>,ans,res+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>约数</title>
    <url>/2021/09/07/%E7%BA%A6%E6%95%B0/</url>
    <content><![CDATA[<p>&lt;– !more –&gt;</p>
<h2 id="求1-N每个数的正因子的集合或数目"><a href="#求1-N每个数的正因子的集合或数目" class="headerlink" title="求1-N每个数的正因子的集合或数目"></a>求1-N每个数的正因子的集合或数目</h2><p>用平常的“试除法”可以解，但是会有O(n $\sqrt{n}$)的时间复杂度，因此可以考虑更精妙的算法“倍数法”，主要思想为：对于一个数d，若1-N中某个数的因子包含d，则其必是d的倍数，利用这一思想可以在O（nlog（n））的时间复杂度求出结果。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正因子数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line">ll yz[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n,i,j,cnt;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举因子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n/i;j++)<span class="comment">//枚举倍数，但是某个因子乘以倍数不超过N</span></span><br><span class="line">        &#123;</span><br><span class="line">            yz[i*j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有正因子</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line">ll yz[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; factor[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,cnt;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举因子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n/i;j++)<span class="comment">//枚举倍数，但是某个因子乘以倍数不超过N</span></span><br><span class="line">        &#123;</span><br><span class="line">            factor[i*j].<span class="built_in">push_back</span>(i);<span class="comment">//i*j这个数的因子包含i</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>约数</category>
      </categories>
      <tags>
        <tag>约数</tag>
      </tags>
  </entry>
  <entry>
    <title>String</title>
    <url>/2021/08/16/String/</url>
    <content><![CDATA[<blockquote>
<center><font size="4">“听君一席话，如听一席话”</font></center>
</blockquote>
<span id="more"></span>
<h2 id="字符串快速匹配-kmp"><a href="#字符串快速匹配-kmp" class="headerlink" title="字符串快速匹配(kmp)"></a>字符串快速匹配(kmp)</h2><p>通过建立一个失配数组next[n]用于存储匹配串中每一个位置失配后的位置用于快速定位而避免重复检查，从而大大提高匹配效率。</p>
<ul>
<li><a href="https://vjudge.net/problem/HDU-2087">HDU-2087</a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">2000</span>],str1[<span class="number">2000</span>],str2[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">int</span> ne[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt,j,i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str1+<span class="number">1</span>)&amp;&amp;str1[<span class="number">1</span>]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str2+<span class="number">1</span>);</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1=<span class="built_in">strlen</span>(str1+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len2=<span class="built_in">strlen</span>(str2+<span class="number">1</span>);</span><br><span class="line">        ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;str2[i]!=str2[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(str2[i]==str2[j+<span class="number">1</span>]) j++;</span><br><span class="line">            ne[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=len1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;str1[i]!=str2[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(str1[i]==str2[j+<span class="number">1</span>]) j++;</span><br><span class="line">            <span class="keyword">if</span>(j==len2) </span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                j=<span class="number">0</span>;    <span class="comment">//字符串不重复匹配</span></span><br><span class="line">                <span class="comment">//j=ne[j];字符串可重复匹配</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="kmp求字符串最小循环节"><a href="#kmp求字符串最小循环节" class="headerlink" title="kmp求字符串最小循环节"></a>kmp求字符串最小循环节</h2><ul>
<li>结论：长度为n的字符串的最小循环节长度表示为：xlen=n-next[n]。举一个一般的例子帮助自己理解，设str=”abababab”,由m(4)个最小的完整循环节构成，即n=xlen*(m),则next[n]=6，即m-1(3)个最小循环节，所以next[n]=(m-1)*xlen,则 n - next[n] 等于一个最小循环节的长度xlen，因此n-next[n]即为长度为n的字符串的最小循环节长度。若字符串由不完整的循环节构成，此时n-next[n]不再表示最小循环节长度，他撒谎也不是，举个🌰：设str=”abcab”,此时n=5、next[5]=2,n-next[n]=3,由n%（n-next[n])!=0,故n-next[n]不可能成为最小循环节。</li>
<li>总结：若要求最小循环节，首先求出n-next[n],若n-next[n]能整除总长度n，则n-next[n]即为最小循环节长度，反之则不是（其本身为其循环节）。<blockquote>
<p>“文字是苍白无力滴。”</p>
</blockquote>
</li>
<li><a href="https://vjudge.net/problem/HDU-3746">HDU - 3746</a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;s[j+<span class="number">1</span>]!=s[i]) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(s[j+<span class="number">1</span>]==s[i]) j++;</span><br><span class="line">            ne[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> xlen=len-ne[len];</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,xlen);</span></span><br><span class="line">        <span class="keyword">if</span>(xlen==len) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(len%xlen==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,xlen-(len%xlen));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="kmp求所有相同的前缀、后缀字符串"><a href="#kmp求所有相同的前缀、后缀字符串" class="headerlink" title="kmp求所有相同的前缀、后缀字符串"></a>kmp求所有相同的前缀、后缀字符串</h2><p>假设有长度为n的字符串，首先求出next数组，next[n]表示该字符串中最长的相同前缀后缀字符串的长度，故可以在从长为next[n]的字符串中继续寻找相同的前缀后缀字符串，其结果也为原始字符串(长度为n的字符串)的相同前缀后缀字符串，以此类推，直到结果为0，即没有的相同前缀后缀字符串了。举个🌰：abcdab abcdab，此处next[12]=6,next[6]=2,next[2]=0,故长为2、6的前缀字符串”ab”、”abcdab”亦为后缀字符串,且系该字符串所有的相同前缀后缀字符串。</p>
<ul>
<li>题目来源：codeforces 126 B<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=len;</span><br><span class="line">    ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>]) j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125; </span><br><span class="line">    len=ne[len];</span><br><span class="line">    <span class="keyword">while</span>(len)</span><br><span class="line">    &#123;   </span><br><span class="line">        ss.<span class="built_in">insert</span>(len);<span class="comment">//将相同前缀后缀字符串的长度插入集合ss</span></span><br><span class="line">        len=ne[len];<span class="comment">//回溯查找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ss.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Just a legend\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=tmp<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ss.<span class="built_in">count</span>(ne[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,ne[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Just a legend\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ans;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="kmp求最长后缀回文字符串"><a href="#kmp求最长后缀回文字符串" class="headerlink" title="kmp求最长后缀回文字符串"></a>kmp求最长后缀回文字符串</h2><p>给定字符串s，若求最长后缀回文字符串,先将s倒转为rev，将s作为模板串、rev作为匹配串,用kmp算法将rev去s中进行匹配,匹配结束后最终停留在rev(匹配串)的位置指针j即为最长后缀回文字符串的长度。举个🌰：字符串s为：”accbb”,其翻转字符串rev为：”bbcca”,进行一次kmp匹配后，最终匹配串的位置指针j的位置为2,故最长后缀回文字符串为”bb”。</p>
<ul>
<li><a href="https://vjudge.net/problem/UVA-11475">UVA-11475</a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此题先求出最长后缀回文字符串,</span></span><br><span class="line"><span class="comment">在将原字符串的剩余部分进行翻转拼接在原字符串后即为正确答案。</span></span><br><span class="line"><span class="comment">如：&quot;accbb&quot;，最长后缀回文字符串为&quot;bb&quot;,则将&quot;acc&quot;翻转为&quot;cca&quot;拼接在原串后</span></span><br><span class="line"><span class="comment">得到&quot;accbbcca&quot;即使原串添加最少的字母成为回文字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">char</span> res[N];</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(res+<span class="number">1</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i]=s[len-i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;res[i]!=res[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(res[i]==res[j+<span class="number">1</span>]) j++;</span><br><span class="line">            ne[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;s[i]!=res[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(s[i]==res[j+<span class="number">1</span>]) j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s%s\n&quot;</span>,s+<span class="number">1</span>,res+j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="Manacher-算法（马拉车算法！？）"><a href="#Manacher-算法（马拉车算法！？）" class="headerlink" title="Manacher 算法（马拉车算法！？）"></a>Manacher 算法（马拉车算法！？）</h2><p>可以线性复杂度O(n)求出最长/所有回文子串,真是妙蛙种子吃着妙脆角妙进了米奇妙妙屋,秒到家了！好吧，其实也没有多妙，又不能帮我上大分，饭桶一个😑。 </p>
<ul>
<li><strong>概念引出</strong>：</li>
</ul>
<ol>
<li>ManacherString：经过Manacher预处理的字符串，以下的概念都是基于ManasherString产生的。</li>
<li>回文半径和回文直径：因为处理后回文字符串的长度一定是奇数，所以回文半径是包括回文中心在内的回文子串的一半的长度，回文直径则是回文半径的2倍减1。</li>
<li>最右回文边界R：在遍历字符串时，每个字符遍历出的最长回文子串都会有个右边界，而R则是所有已知右边界中最靠右的位置，也就是说R的值是只增不减的。</li>
<li>回文中心C：取得当前R的第一次更新时的回文中心。由此可见R和C时伴生的。</li>
<li>半径数组：这个数组记录了原字符串中每一个字符对应的最长回文半径。</li>
</ol>
<ul>
<li><strong>算法流程如下：</strong></li>
</ul>
<ol>
<li>众所周知，偶回文串的处理相较于奇字符串是一大难题，该算法用来应对偶数字符串的方法就是预处理，这个预处理可以巧妙的让所有字符串都变为奇数回文串，其实就是将原字符串的首部和尾部以及每两个字符之间插入一个特殊字符，这一步预处理操作后的效果就是原字符串的长度从n改变成了2*n+1，这样可以遍历一次新串，以每个点为中心向两端扩展该奇回文字符串，最后维护一个有效的最大值即可。<br>&emsp;</li>
<li>R和C的初始值为-1，创建半径数组parr。(实际算法中的R是以i为中心的最回文右边界的值加1，同理，以i为回文中心的最长回文串的右端取不到i+parr[i]（parr[i]为i处的回文半径），只能向右扩展至i+parr[i]-1).<br>&emsp;</li>
<li>开始从下标 i = 0 去遍历ManacherString，每次维护最长回文子串的值即可。<br>&emsp;<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ans;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">length</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=s.<span class="built_in">length</span>()*<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//manacher处理后的字符串的长度为2*len-1</span></span><br><span class="line">    <span class="keyword">char</span>* tmp=<span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">    <span class="keyword">int</span>* parr=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对初始字符串数组进行处理，偶数位置0、2、4...变为&#x27;#&#x27;,奇数位置为原始字符</span></span><br><span class="line"><span class="comment">    如&quot;aba&quot;转化为&quot;#a#b#a#&quot;</span></span><br><span class="line"><span class="comment">    这样处理回文串起来只要从中心点向两侧扩展即可(这样相当于简化处理了原字符串的奇回文串和偶回文串)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">0</span>) tmp[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> tmp[i]=s[(i<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> R=<span class="number">-1</span>;<span class="comment">//初始化回文右边界的值为-1</span></span><br><span class="line">    <span class="keyword">int</span> C=<span class="number">-1</span>;<span class="comment">//初始化回文中心的值为-1</span></span><br><span class="line">    <span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i&lt;R时有两种情形,不确定属于哪种情形,故取二者的最小值赋值给i处的parr[i],即回文半径值,后续在进行扩展更新</span></span><br><span class="line">        <span class="comment">//2*c-i为i关于C的对称点</span></span><br><span class="line">        parr[i]=R&gt;i?<span class="built_in">min</span>(R-i,parr[<span class="number">2</span>*C-i]):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i+parr[i]&lt;len&amp;&amp;i-parr[i]&gt;<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i+parr[i]]==tmp[i-parr[i]]) parr[i]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i+parr[i]&gt;R)<span class="comment">//此时的回文右边界超过原来的回文右边界则进行更新</span></span><br><span class="line">        &#123;</span><br><span class="line">            R=i+parr[i];</span><br><span class="line">            C=i;<span class="comment">//回文中心的值也要更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        parr[i]-1表示以该处为中心原始串的回文串的长度，减1是因为</span></span><br><span class="line"><span class="comment">        在tmp串(处理后的串)中以i处为中心的最长回文串的右边界为i+parr[i]-1,而不是i+parr[i]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(parr[i]<span class="number">-1</span>&gt;maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            maxn=parr[i]<span class="number">-1</span>;</span><br><span class="line">            ans=i;<span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int k=i-(parr[i]-1);k&lt;=i+(parr[i]-1);k++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     printf(&quot;%c&quot;,tmp[k]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// printf(&quot;\n&quot;);输出所有的回文子串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] tmp;</span><br><span class="line">    <span class="keyword">delete</span>[] parr;</span><br><span class="line">    <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//取消iostream的输入输出缓存,提高cin、cout的效率。</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">manacher</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="kmp统计前缀字符串出现次数"><a href="#kmp统计前缀字符串出现次数" class="headerlink" title="kmp统计前缀字符串出现次数"></a>kmp统计前缀字符串出现次数</h2><p>主要用到kmp中的next数组，遍历一次next数组，若next[m]=n，则表示长度为n的前缀字符串在序号为1-m的字符串（假设字符串从1开始编号）中出现一次，理解了这一层含义之后只需要遍历一次next数组，用map记录下前缀字符串的出现次数就行,因为遍历next数组的处理没有考虑到原始的前缀，故每种前缀的出现次数应加1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    ne[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>]) j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">        m[j]++;<span class="comment">//长度为j的前缀字符串出现次数加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,m[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AC自动机结合矩阵快速幂以及矩阵加速解决实际问题"><a href="#AC自动机结合矩阵快速幂以及矩阵加速解决实际问题" class="headerlink" title="AC自动机结合矩阵快速幂以及矩阵加速解决实际问题"></a>AC自动机结合矩阵快速幂以及矩阵加速解决实际问题</h2><table><tr><td bgcolor="#AAAAAA"><font color="w"> 1.给定m个模板串，求出在规定字符类型中长度为n的不含任何一个模板串的字符串的个数。</font></td></tr></table>
首先将所有模板串插入并建好字典树，总共得到tot+1个结点（包括根节点0），所有插入字符串的末尾结点的 num[] 值标记为1，即从根节点开始遍历末尾结点不能经过该点，否则会包含该模板串，后续利用 fail[] 数组将其余从根节点出发不能经过的点的 num[] 标记为1，处理条件为：若其失配指针出的结点不能经过，则该结点也不能经过，因为其失配指针处的位置表示其最长后缀，若其后缀为模板串不能被包含，则该串自己也不能被包含。建立矩阵模型，预处理初始矩阵m,m[i][j]表示从i结点到j结点且长度为1的字符串的个数，那么问题便简化为从根节点0到所有结点（包括自己）的长度为n的符合条件的字符串的个数。对矩阵m作n次幂（矩阵快速幂），得到的矩阵元素m'[i][j]则表示从i结点到j节点长度为n的不同方案数，在字典树中也就是长度为n的字符串个数，因为不符合条件的点已经被处理，那么最终答案就是m'[0][0]+...m'[0][tot]。

<hr>
<ul>
<li><a href="http://poj.org/problem?id=2778">POJ - 2778</a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e9</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> node[<span class="number">110</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">bool</span> num[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">char</span> p[<span class="number">20</span>];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">200</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mat[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">    <span class="built_in">matrix</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">matrix <span class="keyword">operator</span> *(matrix a,matrix b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    matrix c;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=tot;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.mat[i][j]+=a.mat[i][k]*b.mat[k][j];</span><br><span class="line">                c.mat[i][j]%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;t[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!node[root][mp[t[i]]]) node[root][mp[t[i]]]=++tot;</span><br><span class="line">        root=node[root][mp[t[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    num[root]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[u][i]) q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(num[fail[u]]==<span class="number">1</span>) num[u]=<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(node[u][i]) fail[node[u][i]]=node[fail[u]][i],q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">            <span class="keyword">else</span> node[u][i]=node[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_matrix</span><span class="params">(matrix &amp;a)</span><span class="comment">//得到初始矩阵</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!num[i]&amp;&amp;!num[node[i][j]])<span class="comment">//num值为1的结点不能要，因为该结点的状态表示一个不能被包含的串</span></span><br><span class="line">            &#123;</span><br><span class="line">                a.mat[i][node[i][j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(matrix &amp;ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) ans.mat[i][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(matrix ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans.mat[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,i;</span><br><span class="line">    ll n;</span><br><span class="line">    mp[<span class="string">&#x27;A&#x27;</span>]=<span class="number">0</span>;</span><br><span class="line">    mp[<span class="string">&#x27;G&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;C&#x27;</span>]=<span class="number">2</span>;</span><br><span class="line">    mp[<span class="string">&#x27;T&#x27;</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">        <span class="built_in">insert</span>(p);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,tot);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">get_fail</span>();<span class="comment">//以后建立字典树之后不get_fail()就是猪。</span></span><br><span class="line">    matrix a,ans;</span><br><span class="line">    <span class="built_in">get_matrix</span>(a);</span><br><span class="line">    <span class="built_in">get_ans</span>(ans);</span><br><span class="line">    <span class="comment">//print(a);</span></span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=(sum+ans.mat[<span class="number">0</span>][i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<table><tr><td bgcolor="#AAAAAA"><font color="w"> 2.字符只能为小写英文字母，给定m个模板串，求出长度不超过n且包含任意一个模板串的字符串个数</font></td></tr></table>
由上文已知可求出所有长度为n的字符串中所有不包含模板串的字符串，故此问题转化为所有字符串减去所有不包含模板串的字符串个数。总字符串数为26^1+...+26^n,即所有长度不超过n的字符串数，所有不包含模板串的字符串数为长度为1到长度为n的不包含模板串的字符串数之和。由于n过于庞大，直接求和会超时，因此需要用到矩阵加速。设f[n]=1 + 26^1 + 26^2 + … + 26^n，那么f[n]=26*f[n-1]+1，则有{f[n]，1} = {f[n-1]，1}*[26 0;1 1]，所以{f[n],1}=[1,1]*[26 0;1 1]^n，即可求出长度不超过n的字符串数res=f[n]-1;由上文可知，将模板串插入字典树（设最大节点为tot）并经过预处理可得到一阶（不是一维）矩阵m[][]，而其n阶矩阵只能求出长度为n且不包含模板串的字符串个数，那么如何做到求和呢？只需要增加一维，第tot+1列全部为1，那么在乘积之后m[0][tot+1]即表示上一阶的所有不包含模板串个数+1（多了个1*1），最后求出m的n阶幂后，那么所有不包含模板串的字符串个数即为ans=m[0][0]+m[0][1]+...+m[0][tot+1]-1，那么res-ans即为最终答案！

<hr>
<p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=2243">HDU - 2243</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> node[<span class="number">40</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">char</span> p[<span class="number">10</span>];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mat[<span class="number">40</span>][<span class="number">40</span>];</span><br><span class="line">    <span class="built_in">matrix</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">matrix <span class="title">mul</span><span class="params">(matrix a,matrix b,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=cnt;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.mat[i][j]+=(a.mat[i][k]*b.mat[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;t[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!node[root][t[i]-<span class="string">&#x27;a&#x27;</span>]) node[root][t[i]-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">        root=node[root][t[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    num[root]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[u][i]) q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(num[fail[u]]==<span class="number">1</span>) num[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(node[u][i]) fail[node[u][i]]=node[fail[u]][i],q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">            <span class="keyword">else</span> node[u][i]=node[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_matrix</span><span class="params">(matrix &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!num[i]&amp;&amp;!num[node[i][j]])</span><br><span class="line">            &#123;</span><br><span class="line">                a.mat[i][node[i][j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++) a.mat[i][tot]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=tot;i++) </span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=0;j&lt;=tot;j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%llu &quot;,a.mat[i][j]);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(matrix &amp;ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) ans.mat[i][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(matrix a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%llu &quot;</span>,a.mat[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,i;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%llu&quot;</span>,&amp;m,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(fail));</span><br><span class="line">        <span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(num));</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">            <span class="built_in">insert</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">get_fail</span>();</span><br><span class="line">        matrix a,ans,b,e;</span><br><span class="line">        b.mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">26</span>;</span><br><span class="line">        b.mat[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        b.mat[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        b.mat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        e.mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        e.mat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        ll x=n;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&amp;<span class="number">1</span>) e=<span class="built_in">mul</span>(b,e,<span class="number">1</span>);</span><br><span class="line">            b=<span class="built_in">mul</span>(b,b,<span class="number">1</span>);</span><br><span class="line">            x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res=e.mat[<span class="number">0</span>][<span class="number">0</span>]+e.mat[<span class="number">1</span>][<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;res:%llu\n&quot;,res);</span></span><br><span class="line">        <span class="built_in">get_matrix</span>(a);</span><br><span class="line">        <span class="built_in">get_ans</span>(ans);</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,ans.mat[0][0],ans.mat[1][1]);</span></span><br><span class="line">        x=n;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,a,tot);</span><br><span class="line">            a=<span class="built_in">mul</span>(a,a,tot);</span><br><span class="line">            x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// print(ans);</span></span><br><span class="line">        ll an=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            an+=ans.mat[<span class="number">0</span>][i];</span><br><span class="line">            <span class="comment">// printf(&quot;%llu &quot;,ans.mat[0][i]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,res-an+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="AC自动机与fail树"><a href="#AC自动机与fail树" class="headerlink" title="AC自动机与fail树"></a>AC自动机与fail树</h2><ul>
<li><p>如前文所写的未经优化的AC自动机可以AC掉简单情形下的多模式字符串匹配问题，但是会被特殊的模式串如”aaa…aaa”（设长度为n）卡掉不少的时间，因为这样的字符串在匹配时将会循环n次，时间复杂度将退化为单个KMP的 O(n*m)，因此建立fail树统一递归处理处理fail指针的转移状态会快很多。举个🌰：求’a’的出现次数即为’a’+”aa”+”aaa”+…的出现次数即可，那么从后往前依次递归处理即可，在字典树中”a”的出现次数可以转化为”a”的末尾结点的访问次数，因此在建立的fail树中DFS遍历一次便可以得到答案了。</p>
</li>
<li><p>借大佬画的字典树及fail树一用（不对应），老表上图：</p>
</li>
</ul>
<ol>
<li>字典树<br><img src="/images/loading.png" data-original="/2021/08/16/String/%E5%AD%97%E5%85%B8%E6%A0%91.png" alt="字典树"></li>
<li>fail树<br><img src="/images/loading.png" data-original="/2021/08/16/String/fail%E6%A0%91.png" alt="fail树"></li>
</ol>
<hr>
<p><a href="https://www.luogu.com.cn/problem/P5357">LG - P5357</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> total_node=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> cnt[total_node];</span><br><span class="line"><span class="keyword">int</span> match[total_node];</span><br><span class="line"><span class="keyword">int</span> node[total_node][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> fail[total_node];</span><br><span class="line"><span class="keyword">int</span> num[total_node];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ne,to,head;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">char</span> p[total_node];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* t,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;t[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!node[root][t[i]-<span class="string">&#x27;a&#x27;</span>]) node[root][t[i]-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">        root=node[root][t[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    match[q]=root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[u][i]) q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(node[u][i]) fail[node[u][i]]=node[fail[u]][i],q.<span class="built_in">push</span>(node[u][i]);</span><br><span class="line">            <span class="keyword">else</span> node[u][i]=node[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;t[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        u=node[u][t[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        cnt[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne.<span class="built_in">push_back</span>(head[u]);</span><br><span class="line">    head[u]=to.<span class="built_in">size</span>();</span><br><span class="line">    to.<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        cnt[u]+=cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(fail));</span><br><span class="line">        <span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line">        <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(match));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cnt));</span><br><span class="line">        head.<span class="built_in">resize</span>( total_node + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">            <span class="built_in">insert</span>(p,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">get_fail</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        <span class="built_in">query</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;i++) <span class="built_in">add</span>(fail[i],i);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt[match[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://www.cnblogs.com/Paul-Guderian/p/10217205.html/">https://www.cnblogs.com/Paul-Guderian/p/10217205.html\</a></p>
<h2 id="后缀数组求两个串的最长公共子串"><a href="#后缀数组求两个串的最长公共子串" class="headerlink" title="后缀数组求两个串的最长公共子串"></a>后缀数组求两个串的最长公共子串</h2><p>要求两个字符串的最长公共子串，首先将两个字符串进行拼接，利用后缀数组知识求出height数组，即最长公共字符串为某个height[i]的值，此时height[i]表示排序后排名为i和i-1的后缀字符串的最长前缀，因此需保证这两个后缀字符串的的起始位置分别在两个原字符串中，此时height[i]为两个字符串的公共子串。</p>
<p><font color="red">Pay attention：</font></p>
<ol>
<li><p>字符串不能直接拼接，需在二者之间加上分隔符，如 $!$ ，避免二者的公共子串从第一个字符串跨越至第二个字符串$aabaa$ $baab$，若不加 $!$ 分隔，则求出来的最长公共子串为$baab$，实则为$baa$。</p>
</li>
<li><p>可能在不同位置有相同的公共子串，若是要求输出公共子串不能直接输出，需要考虑去重。</p>
</li>
</ol>
<p><a href="https://vjudge.net/problem/UVA-760">UVA - 760</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[N], s1[N], s2[N];</span><br><span class="line"><span class="keyword">int</span> y[N],x[N],c[N],sa[N],rk[N],height[N];</span><br><span class="line"><span class="keyword">int</span> n, m, len1, len2;<span class="comment">//n为合并后的总长度</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_SA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        c[i]=x[i]=y[i]=sa[i]=rk[i]=height[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">122</span>; <span class="comment">//ascll(&#x27;z&#x27;)=122</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) c[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) ++c[x[i]=s[i]];<span class="comment">//桶</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=m; ++i) c[i]+=c[i<span class="number">-1</span>];<span class="comment">//求前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; --i) sa[c[x[i]]--]=i;<span class="comment">//逆着标序 得到sa</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k&lt;&lt;=<span class="number">1</span>)&#123; <span class="comment">//倍增合并</span></span><br><span class="line">		<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>; i&lt;=n; ++i) y[++num]=i;<span class="comment">//没有第二关键字，排名在最前</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="keyword">if</span> (sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) c[i]=<span class="number">0</span>;       <span class="comment">//初始化桶</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) ++c[x[i]];    <span class="comment">//桶</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=m; ++i) c[i]+=c[i<span class="number">-1</span>]; <span class="comment">//求前缀和</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; --i) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;<span class="comment">//第二关键字真正的排了序</span></span><br><span class="line"> </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) y[i] = x[i];</span><br><span class="line">		x[sa[<span class="number">1</span>]] = num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) <span class="comment">//对第二关键字进行了简单的桶分类保存至x数组中</span></span><br><span class="line">			x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]] &amp;&amp; y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k]) ? num : ++num;</span><br><span class="line">		<span class="keyword">if</span> (num==n) <span class="keyword">break</span>;</span><br><span class="line">		m=num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//for (int i=1; i&lt;=n; ++i) printf(&quot;%d &quot;, sa[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) rk[sa[i]]=i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">		<span class="keyword">if</span> (rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;<span class="comment">//第一名height为0</span></span><br><span class="line">		<span class="keyword">if</span> (k) --k;   <span class="comment">//h[i]&gt;=h[i-1]-1;</span></span><br><span class="line">		<span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">while</span> (j+k&lt;=n &amp;&amp; i+k&lt;=n &amp;&amp; s[i+k]==s[j+k]) ++k;</span><br><span class="line">		height[rk[i]]=k;<span class="comment">//h[i]=height[rk[i]];</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//	for(int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;,height[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, s1+<span class="number">1</span>, s2+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">        len2 = <span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;len1:%d len2:%d\n&quot;, len1, len2);</span></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len1;++i) s[++n] = s1[i];</span><br><span class="line">        s[++n]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> now = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len2;++i) s[++n] = s2[i];</span><br><span class="line">        s[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">get_SA</span>();</span><br><span class="line">        <span class="built_in">get_height</span>();</span><br><span class="line">        <span class="comment">//cout&lt;&lt;s+1&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//for(int i=1;i&lt;=n;++i) printf(&quot; n:%d sa:%d %d\n&quot;, n, sa[i], height[i]);</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i] &gt; ans)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sa[i<span class="number">-1</span>] &lt; now &amp;&amp; sa[i] &gt; now) ans = <span class="built_in">max</span>(ans, height[i]);</span><br><span class="line">                <span class="keyword">if</span>(sa[i] &lt; now &amp;&amp; sa[i<span class="number">-1</span>] &gt; now) ans = <span class="built_in">max</span>(ans, height[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后缀数组求多个串的最长公共子串"><a href="#后缀数组求多个串的最长公共子串" class="headerlink" title="后缀数组求多个串的最长公共子串"></a>后缀数组求多个串的最长公共子串</h2><p>将所有字符串进行拼接，每两个字符串之间用分隔符分隔，二分最长公共子串的长度（考虑好二分的上下边界），并利用后缀数组的知识判断其是否为所有字符串的公共子串。值得注意的是：分隔符不能相同，否则在某些情形下求出的最长公共子串会出现错误，比如都用0分隔：$c0abc0a$,那么在一半的模板串中共同出现的最长子串为c0a（模板串为$c$、$abc$、$a$）。</p>
<ul>
<li>判断：从头开始遍历height数组并根据二分值对其畸形分组，即大于等于x的即为一组，那么该组中的后缀字符串具有长度为x的公共子串，若这些后缀字符串在所有字符串中均有分布，则表示该长度为x的公共子串是所有字符串的公共子串。那么如何判断该后缀字符串属于哪个字符串呢？输入字符串的时候预处理一下即可，用数组kind[]将每个字符串边界位置记录下来即可，也就是分隔符的位置，第一个分隔符即为第一个字符串的右边界，以此类推…若某个后缀字符串的编号为p，只需遍历一遍kind数组，若$ kind[j-1]&lt;p&lt;kind[j] $，那么说明该后缀字符串属于第 j 个字符串。</li>
</ul>
<ul>
<li>记录：遇到不符合分组条件的则进行一次判断，若该分组的后缀字符串分布在所有字符串中，则表示所有字符串有该共同子串。那么记录某一个后缀字符串的起始位置放于数组 v[] 中，只要在外部维护公共子串的长度，那么就能输出最长最长公共子串了。这里需要从v[1]开始存储，因为可能有多个符合条件的子串，故可能有多个位置，v[0]记录符合条件的子串数目，因为是对height数组顺序遍历处理得来的结果，所以顺序输出即为字典序结果。</li>
</ul>
<p><a href="https://vjudge.net/problem/POJ-3080">POJ - 3080</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N],wb[N],wv[N],wss[N],rak[N],height[N],cal[N],n,sa[N];</span><br><span class="line"><span class="keyword">char</span> s[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p) &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rak[sa[i]]=i;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rak[i++]]=k)</span><br><span class="line">     <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rak[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)rak[i]=rak[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> kind[<span class="number">120</span>];</span><br><span class="line"><span class="keyword">int</span> v[N];</span><br><span class="line"><span class="keyword">int</span> bound,cas;<span class="comment">//cas为字符串数数目</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">//printf(&quot;x: %d\n&quot;,x);</span></span><br><span class="line">    <span class="keyword">int</span>  i,j;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(height[i]&gt;=x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p1=sa[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> p2=sa[i];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=cas;j++)<span class="comment">//判断属于哪个字符串并计数</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p1&gt;kind[j<span class="number">-1</span>]&amp;&amp;p1&lt;kind[j]) cnt+=(vis[j]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>),vis[j]=<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//printf(&quot;kind:%d %d %d\n&quot;,kind[j-1],kind[j],cnt);</span></span><br><span class="line">                <span class="keyword">if</span>(p2&gt;kind[j<span class="number">-1</span>]&amp;&amp;p2&lt;kind[j]) cnt+=(vis[j]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>),vis[j]=<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//printf(&quot;kind:%d %d %d\n&quot;,kind[j-1],kind[j],cnt);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d %d\n&quot;,p1,p2,cnt);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=cas)<span class="comment">//所有子串具有该长为x的共同子串</span></span><br><span class="line">            &#123;</span><br><span class="line">                v[++size]=sa[i<span class="number">-1</span>];<span class="comment">//记录后缀字符串的起始位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=cas)</span><br><span class="line">    &#123;</span><br><span class="line">        v[++size]=sa[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size)</span><br><span class="line">    &#123;</span><br><span class="line">        v[<span class="number">0</span>]=size;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,ans,maxn,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cas);</span><br><span class="line">        n=<span class="number">1</span>;</span><br><span class="line">        maxn=INF;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cas;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(p);</span><br><span class="line">            maxn=<span class="built_in">min</span>(maxn,len);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cal[n++]=p[j];</span><br><span class="line">            &#125;</span><br><span class="line">            cal[n]=<span class="string">&#x27;#&#x27;</span>+i;<span class="comment">//分隔多个字符串的分隔符不能相同，否则会出现如下情形</span></span><br><span class="line">                         <span class="comment">//c*abc*a,那么在一半的模板串中共同出现的最长子串为&quot;c*a&quot;。</span></span><br><span class="line">            kind[i]=n;<span class="comment">//记录第i个字符串的右边界</span></span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        cal[n<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">        n-=<span class="number">2</span>;<span class="comment">//拼接后的字符串的最终长度，不包括&#x27;\0&#x27;</span></span><br><span class="line">        <span class="comment">// for(i=0;i&lt;=cas;i++) printf(&quot;%d &quot;,kind[i]);</span></span><br><span class="line">        <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">         <span class="comment">//printf(&quot;%s\n&quot;,s+1);</span></span><br><span class="line">        <span class="built_in">da</span>(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>,sa,n);</span><br><span class="line">        <span class="keyword">int</span> low=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> high=maxn;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,maxn);</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">            &#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// for(i=1;i&lt;=v[0];i++) printf(&quot;%d &quot;,v[i]);</span></span><br><span class="line">        <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;no significant commonalities\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">            <span class="keyword">for</span>(j=v[<span class="number">1</span>];j&lt;v[<span class="number">1</span>]+ans;j++)<span class="comment">//题目只要求输出字典序最小的一个，故起始位置为v[1]，后面可能记录了其它最长子串的起始位置，但字典序不是最小，故不输出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,cal[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h2 id="后缀数组-RMQ（区间最值问题）"><a href="#后缀数组-RMQ（区间最值问题）" class="headerlink" title="后缀数组+RMQ（区间最值问题）"></a>后缀数组+RMQ（区间最值问题）</h2><p>问题给出n个字符串，要求某两个字符串的最长公共前缀。</p>
<ol>
<li>首先将所有字符串用不相同且未曾出现过的字符进行拼接起来，记录每个字符串的起始位置在拼接后的字符串中的位置编号，建立后缀数组。</li>
<li>利用rk数组可知道两个待查询字符串对应的后缀字符串所在的排名 p1、p2（假设 p1 &lt; p2 ），即求排名为 p1 、p2 的后缀字符串的最长公共前缀lcp(p1,p2),也就是     height[p1+1] 至 height[p2] 中的最小值，由此可以转化为 $p_1+1 - p_2$ 区间内的最小值问题（RMQ）。</li>
</ol>
<p><a href="https://vjudge.net/problem/UVA-12338">UVA - 12338</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N],wb[N],wv[N],wss[N],rk[N],height[N],cal[N],n,sa[N];</span><br><span class="line"><span class="keyword">char</span> s[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p) &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rk[sa[i]]=i;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rk[i++]]=k)</span><br><span class="line">     <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rk[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)rk[i]=rk[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="keyword">int</span> llen[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">30</span>];</span><br><span class="line"><span class="comment">//我们设二维数组dp[i][j]表示从第i位开始连续$2^j$</span></span><br><span class="line"><span class="comment">//个数中的最小值。例如dp[2][1]就表示从第二位数开始连续两个数的最小值（也就是从第二位数到第三位数的最小值），dp[i][0]就表示第i个数字本身。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq_init</span><span class="params">()</span> <span class="comment">//RMQ初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        dp[i][<span class="number">0</span>]=height[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;=n; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n; i++)</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>], dp[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]); <span class="comment">//i + (1 &lt;&lt; (j - 1))</span></span><br><span class="line">    <span class="comment">//左移操作符的优先级小于加号的优先级</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="built_in">log2</span>(r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(dp[l][k], dp[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,ans,t,cs,q,x,y,cas;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(cs=<span class="number">1</span>;cs&lt;=t;cs++)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cas);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cas;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pos[i]=n;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(p);</span><br><span class="line">            llen[i]=len;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cal[n++]=p[j];</span><br><span class="line">            &#125;</span><br><span class="line">            cal[n]=<span class="number">150</span>+i;<span class="comment">//分隔多个字符串的分隔符不能相同，否则会出现如下情形</span></span><br><span class="line">                         <span class="comment">//c*abc*a,那么在一半的模板串中共同出现的最长子串为&quot;c*a&quot;。</span></span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        cal[n<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">        n-=<span class="number">2</span>;<span class="comment">//拼接后的字符串的最终长度，不包括&#x27;\0&#x27;</span></span><br><span class="line">        <span class="comment">// for(i=0;i&lt;=cas;i++) printf(&quot;%d &quot;,kind[i]);</span></span><br><span class="line">        <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">         <span class="comment">//printf(&quot;%s\n&quot;,s+1);</span></span><br><span class="line">        <span class="built_in">da</span>(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">1000000</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>,sa,n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,cs);</span><br><span class="line">        <span class="built_in">rmq_init</span>();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=INF;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="comment">//printf(&quot;pos:%d %d\n&quot;,pos[x],pos[y]);</span></span><br><span class="line">            <span class="keyword">int</span> p1=<span class="built_in">min</span>(rk[pos[x]],rk[pos[y]]);</span><br><span class="line">            <span class="keyword">int</span> p2=<span class="built_in">max</span>(rk[pos[x]],rk[pos[y]]);</span><br><span class="line">            <span class="keyword">if</span>(x==y) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,llen[x]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">rmq</span>(p1+<span class="number">1</span>,p2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后缀数组求某字符串中排名为k的子串"><a href="#后缀数组求某字符串中排名为k的子串" class="headerlink" title="后缀数组求某字符串中排名为k的子串"></a>后缀数组求某字符串中排名为k的子串</h2><p>求排名首先想到后缀数组对后缀字符串的排序，而后缀字符串的前缀即为子串，对后缀字符串排序即为对子串排序，只不过会有重复的子串穿插其中，那么从排名为1的后缀字符串开始遍历时只需减去height[i]的值即可得到目前的正确排名数n，判断是否大于等于k即可知道该排名为k的子串是否在该后缀字符串中，根据二者的关系输出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//cin.sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//数量级为1e9</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N],wb[N],wv[N],wss[N],rk[N],height[N],cal[N],n,sa[N];</span><br><span class="line"><span class="keyword">char</span> s[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p) &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rk[sa[i]]=i;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rk[i++]]=k)</span><br><span class="line">     <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rk[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)rk[i]=rk[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,ans,k,cs,t,cnt,l;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    n=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;s[i];i++) cal[n++]=s[i];</span><br><span class="line">    cal[n]=<span class="number">0</span>;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">da</span>(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">300</span>);</span><br><span class="line">    <span class="built_in">calheight</span>(cal+<span class="number">1</span>,sa,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len=n-sa[i]+<span class="number">1</span>-height[i];</span><br><span class="line">            cnt+=len;</span><br><span class="line">            l=cnt-len;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=k-l;</span><br><span class="line">                <span class="keyword">int</span> end=sa[i]+height[i]+x<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(j=sa[i];j&lt;=end;j++) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,cal[j]);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>kmp</tag>
        <tag>Manacher</tag>
        <tag>AC自动机</tag>
        <tag>后缀数组</tag>
      </tags>
  </entry>
</search>
